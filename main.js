(()=>{"use strict";var e={747:(e,t,n)=>{n.d(t,{Z:()=>f});var r=n(537),a=n.n(r),i=n(645),o=n.n(i),s=n(667),d=n.n(s),c=new URL(n(833),n.b),u=new URL(n(904),n.b),l=o()(a()),A=d()(c),h=d()(u);l.push([e.id,"/* Body */\nbody, h1, p, ul, li {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    width: 100vw;\n    height: 100vh;\n    display: grid;\n    grid: 1fr 4fr / 300px 4fr;\n    font-family: 'Courier New', Courier, monospace;\n}\n\n#inboxButton, #today, #week, #projects>ul, button, .checkbox, .edit, .delete, .task-delete, #newProject, #addTask {\n    cursor: pointer;\n}\n\n/* Header */\n#header {\n    background-color: #000a4e;\n    display: flex;\n    align-items: center;\n    grid-area: 1 / 1 / 2 / 3;\n}\n\n#logo {\n    width: 500px;\n}\n\n/* Sidebar */\n#sidebar {\n    background: rgb(92, 88, 88);\n    grid-area: 2 / 1 / 3 / 2;\n    padding: 20px;\n    display: flex;\n    gap:10px;\n    flex-direction: column;\n}\n\n#projects {\n    width: 100%;\n    display: grid;\n    gap: 10px;\n}\n\n#projects>ul {\n    display: flex;\n    align-items: center;\n}\n\n.delete {\n    height: 1em;\n    display: none;\n    float: right;\n}\n\n.delete:hover {\n    content: url("+A+");\n}\n\n.project {\n    color: white;\n    list-style: none;\n    font-size: 1.6rem;\n    display: grid;\n    gap: 10px;\n}\n\n.project:hover {\n    font-weight: bold;\n    text-shadow: 2px 2px 5px black;\n}\n\n.current {\n    font-weight: bold;\n    color: #e65310;\n    text-shadow: 1px 1px 3px black;\n}\n\n#newProject {\n    width: 160px;\n    height: 50px;\n    align-self: start;\n}\n\n#newProject:hover {\n    width: 162px;\n    height: 52px;\n    box-shadow: 1px 1px 5px black;\n}\n#newProject:active {\n    width: 159px;\n    height: 49px;\n    box-shadow: none;\n}\n\n#projectForm {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n\n#projectName {\n    width: 160px;\n    height: 30px;\n    border: none;\n    border-radius: 5px;\n}\n\n#projectError {\n    margin-top: 5px;\n    color: red;\n    background-color: white;\n}\n\n#projectSubmit {\n    width: 30px;\n    height: 30px;\n    display: grid;\n    justify-content: center;\n    align-items: center;\n    color: white;\n    background-color: #e65310;\n    border: none;\n    border-radius: 3px;\n}\n\n#addProject {\n    width: 20px;\n    height: 20px;\n}\n\n#newProject, #addTask {\n    padding: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n    color: white;\n    font-weight: bold;\n    font-size: 135%;\n    background-color: #e65310;\n    border-radius: 10px;\n}\n\n/* Main */\n.task, #taskHeader {\n    list-style: none;\n    display: grid;\n    align-items: center;\n    grid-template-columns: 1fr 3fr 4fr 2fr 1.2fr 1fr 1fr;\n    gap:  10px;\n    grid-auto-flow: column;\n    padding: 10px;\n}\n\n#taskHeader {\n    border-bottom: 2px solid black;\n    padding-left: 20px;\n    padding-right: 20px;\n}\n\n.task {\n    border-bottom: 1px solid black;\n    padding: 10px;\n}\n\n#taskList {\n    padding: 10px;\n}\n\n.checkbox, .checked {\n    height: 30px;\n    justify-self: end;\n}\n\n.checked {\n    background-image: url("+h+");\n}\n\n.task-title {\n    font-weight: bold;\n}\n\n.task-priority>img {\n    height: 30px;\n}\n\n.task-delete {\n    height: 30px;\n    float: right;\n}\n\n.task-delete:hover {\n    content: url("+A+");\n}\n\n#taskButtonContainer {\n    height: 82px;\n}\n\n#addTask {\n    width: 120px;\n    height: 50px;\n    margin: 10px;\n}\n\n#addTask:hover {\n    width: 122px;\n    height: 52px;\n    box-shadow: 1px 1px 5px black;\n}\n#addTask:active {\n    width: 119px;\n    height: 49px;\n    box-shadow: none;\n}\n\n#plusIcon {\n    height: 90%;\n}\n\n#taskModal {\n    border: 1px solid black;\n    padding: 10px;\n    width: 100%;\n    background-color: white;\n}\n\n#taskForm {\n    width: 100%;\n    display: grid;\n    align-items: center;\n    grid: 1fr 2fr 1fr / 1fr 3fr 3.8fr 2fr 1.2fr 1fr 1fr;\n    column-gap: 10px;\n    grid-auto-flow: column;\n}\n\n#title, #description, #dueDate {\n    border: 1px solid rgb(92, 88, 88);\n    border-radius: 5px;\n}\n\n#titleLabel {\n    grid-area: 1 / 2 / 2 / 3;\n}\n\n#descriptionLabel {\n    grid-area: 1 / 3 / 2 / 4;\n}\n\n#dueDateLabel {\n    grid-area: 1 / 4 / 2 / 5;\n}\n\n#priorityLabel {\n    grid-area: 1 / 5 / 2 / 6;\n}\n\n#title {\n    grid-area: 2 / 2 / 3 / 3;\n    align-self: end; \n}\n\n#titleError {\n    font-size: 12px;\n    grid-area: 3 / 2 / 4 / 3;\n    color: red;\n}\n\n#description {\n    grid-area: 2 / 3 / 4 / 4; \n}\n\n#dueDate {\n    width: 90%;\n    grid-area: 2 / 4 / 3 / 5; \n    align-self: end;\n}\n\n#priority {\n    grid-area: 2 / 5 / 4 / 6; \n}\n\n#submit {\n    grid-area: 1 / 6 / 4 / 7; \n    color: white;\n    background-color: #e65310;\n    border: none;\n    width: 50px;\n    height: 50px;\n    border-radius: 3px;\n}\n\n#submit:hover {\n    width: 52px;\n    height: 52px;\n    box-shadow: 1px 1px 5px black;\n}\n#submit:active {\n    width: 49px;\n    height: 49px;\n    box-shadow: none;\n}\n\n#submitIcon {\n    width: 100%;\n}","",{version:3,sources:["webpack://./src/stylesheet.css"],names:[],mappings:"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",sourcesContent:["/* Body */\nbody, h1, p, ul, li {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    width: 100vw;\n    height: 100vh;\n    display: grid;\n    grid: 1fr 4fr / 300px 4fr;\n    font-family: 'Courier New', Courier, monospace;\n}\n\n#inboxButton, #today, #week, #projects>ul, button, .checkbox, .edit, .delete, .task-delete, #newProject, #addTask {\n    cursor: pointer;\n}\n\n/* Header */\n#header {\n    background-color: #000a4e;\n    display: flex;\n    align-items: center;\n    grid-area: 1 / 1 / 2 / 3;\n}\n\n#logo {\n    width: 500px;\n}\n\n/* Sidebar */\n#sidebar {\n    background: rgb(92, 88, 88);\n    grid-area: 2 / 1 / 3 / 2;\n    padding: 20px;\n    display: flex;\n    gap:10px;\n    flex-direction: column;\n}\n\n#projects {\n    width: 100%;\n    display: grid;\n    gap: 10px;\n}\n\n#projects>ul {\n    display: flex;\n    align-items: center;\n}\n\n.delete {\n    height: 1em;\n    display: none;\n    float: right;\n}\n\n.delete:hover {\n    content: url('./images/trash-black.svg');\n}\n\n.project {\n    color: white;\n    list-style: none;\n    font-size: 1.6rem;\n    display: grid;\n    gap: 10px;\n}\n\n.project:hover {\n    font-weight: bold;\n    text-shadow: 2px 2px 5px black;\n}\n\n.current {\n    font-weight: bold;\n    color: #e65310;\n    text-shadow: 1px 1px 3px black;\n}\n\n#newProject {\n    width: 160px;\n    height: 50px;\n    align-self: start;\n}\n\n#newProject:hover {\n    width: 162px;\n    height: 52px;\n    box-shadow: 1px 1px 5px black;\n}\n#newProject:active {\n    width: 159px;\n    height: 49px;\n    box-shadow: none;\n}\n\n#projectForm {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n\n#projectName {\n    width: 160px;\n    height: 30px;\n    border: none;\n    border-radius: 5px;\n}\n\n#projectError {\n    margin-top: 5px;\n    color: red;\n    background-color: white;\n}\n\n#projectSubmit {\n    width: 30px;\n    height: 30px;\n    display: grid;\n    justify-content: center;\n    align-items: center;\n    color: white;\n    background-color: #e65310;\n    border: none;\n    border-radius: 3px;\n}\n\n#addProject {\n    width: 20px;\n    height: 20px;\n}\n\n#newProject, #addTask {\n    padding: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n    color: white;\n    font-weight: bold;\n    font-size: 135%;\n    background-color: #e65310;\n    border-radius: 10px;\n}\n\n/* Main */\n.task, #taskHeader {\n    list-style: none;\n    display: grid;\n    align-items: center;\n    grid-template-columns: 1fr 3fr 4fr 2fr 1.2fr 1fr 1fr;\n    gap:  10px;\n    grid-auto-flow: column;\n    padding: 10px;\n}\n\n#taskHeader {\n    border-bottom: 2px solid black;\n    padding-left: 20px;\n    padding-right: 20px;\n}\n\n.task {\n    border-bottom: 1px solid black;\n    padding: 10px;\n}\n\n#taskList {\n    padding: 10px;\n}\n\n.checkbox, .checked {\n    height: 30px;\n    justify-self: end;\n}\n\n.checked {\n    background-image: url(./images/checkHex.svg);\n}\n\n.task-title {\n    font-weight: bold;\n}\n\n.task-priority>img {\n    height: 30px;\n}\n\n.task-delete {\n    height: 30px;\n    float: right;\n}\n\n.task-delete:hover {\n    content: url('./images/trash-black.svg');\n}\n\n#taskButtonContainer {\n    height: 82px;\n}\n\n#addTask {\n    width: 120px;\n    height: 50px;\n    margin: 10px;\n}\n\n#addTask:hover {\n    width: 122px;\n    height: 52px;\n    box-shadow: 1px 1px 5px black;\n}\n#addTask:active {\n    width: 119px;\n    height: 49px;\n    box-shadow: none;\n}\n\n#plusIcon {\n    height: 90%;\n}\n\n#taskModal {\n    border: 1px solid black;\n    padding: 10px;\n    width: 100%;\n    background-color: white;\n}\n\n#taskForm {\n    width: 100%;\n    display: grid;\n    align-items: center;\n    grid: 1fr 2fr 1fr / 1fr 3fr 3.8fr 2fr 1.2fr 1fr 1fr;\n    column-gap: 10px;\n    grid-auto-flow: column;\n}\n\n#title, #description, #dueDate {\n    border: 1px solid rgb(92, 88, 88);\n    border-radius: 5px;\n}\n\n#titleLabel {\n    grid-area: 1 / 2 / 2 / 3;\n}\n\n#descriptionLabel {\n    grid-area: 1 / 3 / 2 / 4;\n}\n\n#dueDateLabel {\n    grid-area: 1 / 4 / 2 / 5;\n}\n\n#priorityLabel {\n    grid-area: 1 / 5 / 2 / 6;\n}\n\n#title {\n    grid-area: 2 / 2 / 3 / 3;\n    align-self: end; \n}\n\n#titleError {\n    font-size: 12px;\n    grid-area: 3 / 2 / 4 / 3;\n    color: red;\n}\n\n#description {\n    grid-area: 2 / 3 / 4 / 4; \n}\n\n#dueDate {\n    width: 90%;\n    grid-area: 2 / 4 / 3 / 5; \n    align-self: end;\n}\n\n#priority {\n    grid-area: 2 / 5 / 4 / 6; \n}\n\n#submit {\n    grid-area: 1 / 6 / 4 / 7; \n    color: white;\n    background-color: #e65310;\n    border: none;\n    width: 50px;\n    height: 50px;\n    border-radius: 3px;\n}\n\n#submit:hover {\n    width: 52px;\n    height: 52px;\n    box-shadow: 1px 1px 5px black;\n}\n#submit:active {\n    width: 49px;\n    height: 49px;\n    box-shadow: none;\n}\n\n#submitIcon {\n    width: 100%;\n}"],sourceRoot:""}]);const f=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var d=e[s],c=r.base?d[0]+r.base:d[0],u=i[c]||0,l="".concat(c," ").concat(u);i[c]=u+1;var A=n(l),h={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(h);else{var f=a(h,r);r.byIndex=s,t.splice(s,0,{identifier:l,updater:f,references:1})}o.push(l)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=n(i[o]);t[s].references--}for(var d=r(e,a),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},904:(e,t,n)=>{e.exports=n.p+"a4bf220d122e95c27681.svg"},833:(e,t,n)=>{e.exports=n.p+"f4c22fc432c56bbca408.svg"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),i=n(569),o=n.n(i),s=n(565),d=n.n(s),c=n(216),u=n.n(c),l=n(589),A=n.n(l),h=n(747),f={};f.styleTagTransform=A(),f.setAttributes=d(),f.insert=o().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),t()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;const g={pubsub:{},sub:function(e,t){this.pubsub[e]=this.pubsub[e]||[],this.pubsub[e].push(t)},unsub:function(e,t){if(this.pubsub[e])for(var n=0;n<this.pubsub[e].length;n++)if(this.pubsub[e][n]===t){this.pubsub[e].splice(n,1);break}},pub:function(e,t){this.pubsub[e]&&this.pubsub[e].forEach((function(e){e(t)}))}};class p{constructor(e,t){this.title=e,this.tasks=t||[]}addTask(e){this.tasks.push(e),g.pub("taskAdded",this.tasks)}removeTask(e){let t=this.tasks.indexOf(e);this.tasks.splice(t,1),g.pub("taskDeleted",this.tasks)}}const m={inbox:new p("inbox"),todayInbox:new p("today"),weekInbox:new p("week"),allProjects:[],init(){if(JSON.parse(localStorage.getItem("allProjects"))){let e=JSON.parse(localStorage.getItem("allProjects"));this.inbox=new p(e[0].title,e[0].tasks),this.todayInbox=new p(e[1].title,e[1].tasks),this.weekInbox=new p(e[2].title,e[2].tasks),this.allProjects.push(this.inbox,this.todayInbox,this.weekInbox);for(let t=3;t<e.length;t++){let n=new p(e[t].title,e[t].tasks);this.allProjects.push(n)}}else this.allProjects.push(this.inbox,this.todayInbox,this.weekInbox),localStorage.setItem("allProjects",JSON.stringify(this.allProjects))}};function w(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function b(e){return w(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function C(e){w(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function y(e){if(w(1,arguments),!b(e)&&"number"!=typeof e)return!1;var t=C(e);return!isNaN(Number(t))}var x={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function v(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}const I={date:v({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:v({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:v({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var B={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function k(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):i;r=e.formattingValues[o]||e.formattingValues[i]}else{var s=e.defaultWidth,d=a.width?String(a.width):e.defaultWidth;r=e.values[d]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const T={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:k({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:k({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:k({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:k({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:k({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function E(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,s=i[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?Y(d,(function(e){return e.test(s)})):D(d,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var u=t.slice(s.length);return{value:o,rest:u}}}function D(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function Y(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var j,M={ordinalNumber:(j={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(j.matchPattern);if(!n)return null;var r=n[0],a=e.match(j.parsePattern);if(!a)return null;var i=j.valueCallback?j.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=e.slice(r.length);return{value:i,rest:o}}),era:E({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:E({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:E({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:E({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:E({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const P={code:"en-US",formatDistance:function(e,t,n){var r,a=x[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:I,formatRelative:function(e,t,n,r){return B[e]},localize:T,match:M,options:{weekStartsOn:0,firstWeekContainsDate:1}};function S(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function N(e,t){w(2,arguments);var n=C(e).getTime(),r=S(t);return new Date(n+r)}function U(e,t){w(2,arguments);var n=S(t);return N(e,-n)}var W=864e5;function L(e){w(1,arguments);var t=1,n=C(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function O(e){w(1,arguments);var t=C(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=L(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=L(i);return t.getTime()>=a.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}function Z(e){w(1,arguments);var t=O(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=L(n);return r}var z=6048e5;function F(e,t){w(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,i=null==a?0:S(a),o=null==n.weekStartsOn?i:S(n.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=C(e),d=s.getUTCDay(),c=(d<o?7:0)+d-o;return s.setUTCDate(s.getUTCDate()-c),s.setUTCHours(0,0,0,0),s}function q(e,t){w(1,arguments);var n=C(e),r=n.getUTCFullYear(),a=t||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,s=null==o?1:S(o),d=null==a.firstWeekContainsDate?s:S(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(r+1,0,d),c.setUTCHours(0,0,0,0);var u=F(c,t),l=new Date(0);l.setUTCFullYear(r,0,d),l.setUTCHours(0,0,0,0);var A=F(l,t);return n.getTime()>=u.getTime()?r+1:n.getTime()>=A.getTime()?r:r-1}function H(e,t){w(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:S(a),o=null==n.firstWeekContainsDate?i:S(n.firstWeekContainsDate),s=q(e,t),d=new Date(0);d.setUTCFullYear(s,0,o),d.setUTCHours(0,0,0,0);var c=F(d,t);return c}var R=6048e5;function X(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const Q=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return X("yy"===t?r%100:r,t.length)},G=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):X(n+1,2)},J=function(e,t){return X(e.getUTCDate(),t.length)},$=function(e,t){return X(e.getUTCHours()%12||12,t.length)},_=function(e,t){return X(e.getUTCHours(),t.length)},V=function(e,t){return X(e.getUTCMinutes(),t.length)},K=function(e,t){return X(e.getUTCSeconds(),t.length)},ee=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return X(Math.floor(r*Math.pow(10,n-3)),t.length)};var te={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return Q(e,t)},Y:function(e,t,n,r){var a=q(e,r),i=a>0?a:1-a;return"YY"===t?X(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):X(i,t.length)},R:function(e,t){return X(O(e),t.length)},u:function(e,t){return X(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return X(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return X(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return G(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return X(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){w(1,arguments);var n=C(e),r=F(n,t).getTime()-H(n,t).getTime();return Math.round(r/R)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):X(a,t.length)},I:function(e,t,n){var r=function(e){w(1,arguments);var t=C(e),n=L(t).getTime()-Z(t).getTime();return Math.round(n/z)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):X(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):J(e,t)},D:function(e,t,n){var r=function(e){w(1,arguments);var t=C(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/W)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):X(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return X(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return X(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return X(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return $(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):_(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):X(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):X(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):V(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):K(e,t)},S:function(e,t){return ee(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return re(a);case"XXXX":case"XX":return ae(a);default:return ae(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return re(a);case"xxxx":case"xx":return ae(a);default:return ae(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+ne(a,":");default:return"GMT"+ae(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+ne(a,":");default:return"GMT"+ae(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return X(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return X((r._originalDate||e).getTime(),t.length)}};function ne(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=t||"";return n+String(a)+o+X(i,2)}function re(e,t){return e%60==0?(e>0?"-":"+")+X(Math.abs(e)/60,2):ae(e,t)}function ae(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+X(Math.floor(a/60),2)+n+X(a%60,2)}const ie=te;function oe(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function se(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const de={p:se,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return oe(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",oe(a,t)).replace("{{time}}",se(i,t))}};function ce(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var ue=["D","DD"],le=["YY","YYYY"];function Ae(e){return-1!==ue.indexOf(e)}function he(e){return-1!==le.indexOf(e)}function fe(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ge=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,pe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,me=/^'([^]*?)'?$/,we=/''/g,be=/[a-zA-Z]/;function Ce(e,t,n){w(2,arguments);var r=String(t),a=n||{},i=a.locale||P,o=i.options&&i.options.firstWeekContainsDate,s=null==o?1:S(o),d=null==a.firstWeekContainsDate?s:S(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=i.options&&i.options.weekStartsOn,u=null==c?0:S(c),l=null==a.weekStartsOn?u:S(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var A=C(e);if(!y(A))throw new RangeError("Invalid time value");var h=ce(A),f=U(A,h),g={firstWeekContainsDate:d,weekStartsOn:l,locale:i,_originalDate:A},p=r.match(pe).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,de[t])(e,i.formatLong,g):e})).join("").match(ge).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return ye(n);var o=ie[r];if(o)return!a.useAdditionalWeekYearTokens&&he(n)&&fe(n,t,e),!a.useAdditionalDayOfYearTokens&&Ae(n)&&fe(n,t,e),o(f,n,i.localize,g);if(r.match(be))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return p}function ye(e){return e.match(me)[1].replace(we,"'")}Math.pow(10,8);var xe=36e5;function ve(e,t){w(1,arguments);var n=t||{},r=null==n.additionalDigits?2:S(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,i=Ee(e);if(i.date){var o=De(i.date,r);a=Ye(o.restDateString,o.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var s,d=a.getTime(),c=0;if(i.time&&(c=Me(i.time),isNaN(c)))return new Date(NaN);if(!i.timezone){var u=new Date(d+c),l=new Date(0);return l.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),l.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),l}return s=Se(i.timezone),isNaN(s)?new Date(NaN):new Date(d+c+s)}var Ie={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},Be=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,ke=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Te=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Ee(e){var t,n={},r=e.split(Ie.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],Ie.timeZoneDelimiter.test(n.date)&&(n.date=e.split(Ie.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=Ie.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function De(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?a:100*i,restDateString:e.slice((r[1]||r[2]).length)}}function Ye(e,t){if(null===t)return new Date(NaN);var n=e.match(Be);if(!n)return new Date(NaN);var r=!!n[4],a=je(n[1]),i=je(n[2])-1,o=je(n[3]),s=je(n[4]),d=je(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,d)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,s,d):new Date(NaN);var c=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(Ne[t]||(Ue(e)?29:28))}(t,i,o)&&function(e,t){return t>=1&&t<=(Ue(e)?366:365)}(t,a)?(c.setUTCFullYear(t,i,Math.max(a,o)),c):new Date(NaN)}function je(e){return e?parseInt(e):1}function Me(e){var t=e.match(ke);if(!t)return NaN;var n=Pe(t[1]),r=Pe(t[2]),a=Pe(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*xe+6e4*r+1e3*a:NaN}function Pe(e){return e&&parseFloat(e.replace(",","."))||0}function Se(e){if("Z"===e)return 0;var t=e.match(Te);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*xe+6e4*a):NaN}var Ne=[31,null,31,30,31,30,31,31,30,31,30,31];function Ue(e){return e%400==0||e%4==0&&e%100!=0}function We(e,t){w(2,arguments);var n=C(e),r=S(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}const Le=n.p+"069fdf2111762f7d7a7c.svg",Oe=n.p+"72f9bb09ecae3209c470.svg",Ze=n.p+"167e7f2e73f451414857.svg",ze=n.p+"c9e38e6c23420b581f96.png",Fe=n.p+"5216741b17bc34dbea74.png",qe=n.p+"ef43b24255408e882bc2.png";class He{constructor(e,t,n,r,a){this.title=e,this.description=t,this.dueDate=n,this.priority=r,this.project=a}}const Re=(()=>{const e=document.getElementById("title"),t=document.getElementById("description"),n=document.getElementById("dueDate"),r=document.getElementsByName("priority"),a=document.getElementById("taskList"),i=document.getElementById("addTask"),o=document.getElementById("submit"),s=document.getElementById("titleError"),d=document.getElementById("newProject"),c=document.getElementById("projects"),u=document.getElementById("projectName"),l=document.getElementById("projectSubmit"),A=document.getElementById("projectError"),h=document.getElementById("taskModal"),f=document.getElementById("projectModal"),b=document.getElementById("inboxButton"),y=document.getElementById("today"),x=document.getElementById("week"),v=document.getElementsByClassName("project");let I=new p(m.inbox.title,m.inbox.tasks);function B(){localStorage.setItem("allProjects",JSON.stringify(m.allProjects))}function k(){B(),L()}function T(e){B(),O(e)}function E(){for(let e=0;e<r.length;e++)r[e].checked=!1;e.value="",t.value="",n.value=""}function D(){"none"===h.style.display?h.style.display="flex":(E(),M(),h.style.display="none")}function Y(){"none"===f.style.display?f.style.display="block":(u.value="",j(),f.style.display="none")}function j(){A.textContent=""}function M(){s.textContent=""}function P(){for(;a.firstChild;)a.removeChild(a.firstChild)}function S(){for(let e=0;e<v.length;e++)v[e].classList.remove("current")}function N(e){const t=document.createElement("ul");t.className="project",e.title===I.title&&t.classList.add("current");const n=document.createElement("li");n.className="projectTitle",n.textContent=e.title||u.value,t.appendChild(n);const r=new Image;r.src=Le,r.className="delete",t.appendChild(r),r.addEventListener("click",U),c.appendChild(t),t.addEventListener("mouseover",(()=>{t.lastChild.style.display="inline"})),t.addEventListener("mouseout",(()=>{t.lastChild.style.display="none"})),n.addEventListener("click",(()=>{S(),t.classList.add("current"),I=new p(e.title,e.tasks),i.style.display="flex",O(e.tasks)}))}function U(e){let t=e.target.parentNode,n=t.querySelector(".projectTitle");m.allProjects.forEach((e=>{if(n.textContent===e.title){let t=e.title;m.allProjects.forEach((e=>{e.tasks.forEach((n=>{n.project===t&&e.removeTask(n)}))}));let n=m.allProjects.indexOf(e);m.allProjects.splice(n,1),g.pub("projectDeleted",e)}})),t.remove(),b.classList.add("current"),O(m.inbox.tasks)}function W(e){console.log(I);let t=e.target.parentNode,n=t.querySelector(".task-title").textContent,r=t.querySelector(".task-description").textContent,a=t.querySelector(".task-dueDate").textContent,i="";""!==a&&(i=Ce(new Date(a),"yyyy-MM-dd")),m.allProjects.forEach((e=>{e.tasks.forEach((t=>{n===t.title&&r===t.description&&i===t.dueDate&&e.removeTask(t)}))}))}function L(){for(let e=v.length;e<m.allProjects.length;e++)N(new p(m.allProjects[e].title,m.allProjects[e].tasks))}function O(e){P(),e.forEach((t=>{const n=document.createElement("ul");n.className="task",n.setAttribute("data-index",e.indexOf(t)),a.appendChild(n);const r=new Image;r.src=Ze,r.className="checkbox",n.appendChild(r),r.addEventListener("click",(()=>{r.classList.toggle("checked")}));for(let e in t){const r=document.createElement("li");if(r.className="task-"+e,"dueDate"===e&&""!==t[e])r.textContent=Ce(ve(t[e]),"MM-dd-yyyy");else if("priority"===e){if(r.className+=" "+t[e],"low"===t.priority){const e=new Image;e.src=ze,r.appendChild(e)}else if("medium"===t.priority){const e=new Image;e.src=Fe,r.appendChild(e)}else if("high"===t.priority){const e=new Image;e.src=qe,r.appendChild(e)}}else r.textContent=t[e];n.appendChild(r)}const i=new Image;i.src=Oe,i.className="task-delete",n.appendChild(i),i.addEventListener("click",W)})),E()}return b.addEventListener("click",(()=>{S(),b.classList.add("current"),P(),I=m.inbox,i.style.display="flex",O(m.inbox.tasks)})),y.addEventListener("click",(()=>{S(),y.classList.add("current"),P(),I=m.inbox,i.style.display="none",O(m.todayInbox.tasks)})),x.addEventListener("click",(()=>{S(),x.classList.add("current"),P(),I=m.inbox,i.style.display="none",O(m.weekInbox.tasks)})),i.addEventListener("click",D),o.addEventListener("click",(function(){if(""===e.value)s.textContent="Please enter task name";else{const a=new He(e.value,t.value,n.value,function(e){let t="";for(let n=0;n<e.length;n++)e[n].checked&&(t=e[n].value);return t}(r),I.title);!function(e){"inbox"===I.title?m.inbox.addTask(e):(m.inbox.addTask(e),I.addTask(e)),function(e){const t=Ce(new Date,"yyyy-MM-dd");e.dueDate===t&&(m.todayInbox.addTask(e),m.weekInbox.addTask(e))}(e),function(e){(function(e,t){w(2,arguments);var n=C(e).getTime(),r=C(t.start).getTime(),a=C(t.end).getTime();if(!(r<=a))throw new RangeError("Invalid interval");return n>=r&&n<=a})(ve(e.dueDate),{start:new Date,end:We(new Date,6)})&&m.weekInbox.addTask(e)}(e)}(a),D(),M()}})),d.addEventListener("click",Y),l.addEventListener("click",(function(){""===u.value?A.textContent="Please enter project name":(I=new p(u.value),i.style.display="flex",P(),S(),Y(),j(),m.allProjects.push(I),g.pub("projectAdded",I))})),g.sub("taskAdded",T),g.sub("taskDeleted",T),g.sub("projectAdded",k),g.sub("projectDeleted",k),{renderProjectList:L,renderTasks:O}})();window.onload=function(){m.init(),Re.renderProjectList(),Re.renderTasks(m.inbox.tasks)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,